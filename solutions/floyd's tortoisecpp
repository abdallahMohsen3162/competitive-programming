
#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
#define F first
#define S second
#define pb push_back
#define pp pop_back
#define yes cout << "Yes\n";
#define no cout << "No\n";
#define all(stl) stl.begin(), stl.end()
#define mem(DATASTRUC, VAL) memset(DATASTRUC,  VAL, sizeof(DATASTRUC))
#define debug(xx) cout << (#xx) << " = " << xx << endl;
#define ll long long
#define int long long
#define sprt cout << "--------------------\n";
using namespace std;
using namespace __gnu_pbds;


void fio(){
  ios_base::sync_with_stdio(0);
  cin.tie(nullptr);
  cout.tie(nullptr);
}

// find_by_order, order_of_key
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set; 

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int slow = nums[0] , fast = nums[0];
        while(true){
            slow = nums[slow];
            fast = nums[nums[fast]];

            if(slow == fast){
                break;
            }
        } 

        slow = nums[0];

        while(slow != fast){
            slow = nums[slow];
            fast = nums[fast];
            if(slow == fast){
                break;
            }
        }

        

        return slow;
    }
};

void tc() {}


//==========
int32_t main(){
  // ios_base::sync_with_stdio(0);
  // cin.tie(nullptr);
  // cout.tie(nullptr);
  int tt = 1; 
  // cin >> tt;

  while(tt--) tc();
  return 0;
}
